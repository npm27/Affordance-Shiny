install.packages("ez")
install.packages("lrd")
install.packages("ggplot2")
install.packages("stringr")
install.packages("stringi")
install.packages("Hmisc")
install.packages("devtools")
install.packages("tidyverse")
install.package("memisc")
install.package("memesc")
install.package("memisc")
install.packages("memisc")
53-27
79-54
setwd("~/GitHub/BOI-Norms/4 Analyses/R")
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
#write to file
#write.csv(Affordance_Strength, file = "Affordance Norms.csv", row.names = F)
#write to file
write.csv(Affordance_Strength, file = "Affordance Norms.csv", row.names = F)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
#write to file
#write.csv(Affordance_Strength, file = "Affordance Norms.csv", row.names = F)
#write to file
write.csv(Affordance_Strength, file = "Affordance Norms.csv", row.names = F)
setwd("~/GitHub/Affordance-Shiny")
setwd("~/GitHub/Affordance-Shiny")
####This script generate data for the cue table####
##load libraries
library(dplyr)
##load the affordance data
affordances = read.csv("1 Affordance Data/Affordance Norms.csv")
cues = unique(tolower(affordances$cue))
cues = data.frame(cues)
##now load the lexical measures
BOI = read.csv("2 Norm Sets/BOI.csv")
con = read.csv("2 Norm Sets/Concreteness.csv")
frq = read.csv("2 Norm Sets/SUBTLEX-US.csv")
###combine!
##BOI
#merge
combined = merge(cues, BOI, by.x = "cues",
by.y = "Word", all.x = TRUE, all.y = FALSE)
#drop columns
combined = combined[ , -c(2, 4:6)]
colnames(combined)[2] = "BOI"
##concrete
#merge
combined2 = merge(combined, con, by.x = "cues",
by.y = "Word", all.x = TRUE, all.y = FALSE)
#drop columns
combined2 = combined2[ , -c(3, 5:9)]
colnames(combined2)[3] = "Concrete"
##Freq
combined3 = merge(combined2, frq, by.x = "cues",
by.y = "Word", all.x = TRUE, all.y = FALSE)
#drop columns
combined3 = combined3[ , -c(4:8, 10:11)]
colnames(combined3)[4] = "SUBTLEX"
####Write to .csv####
#write.csv(combined3, file = "Cue Table.csv", row.names = F)
####Write to .csv####
write.csv(combined3, file = "Cue Table.csv", row.names = F)
setwd("~/GitHub/Affordance-Shiny/3 Shiny")
16+33+21+37+87+32+78+22+102+68+70+68+94+59+173+40+498+63+22+89+79
install.packages("DT")
install.packages("shinythemes")
install.packages("LaTex")
install.packages("xcolor")
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
